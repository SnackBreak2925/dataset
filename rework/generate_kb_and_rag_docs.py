# generate_kb_and_rag_docs.py
# üóÇ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏ RAG-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –º–µ—Ç–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞

import os
import json
from collections import defaultdict


def generate_kb_and_rag_docs(
    dataset_path="dialogue_dataset.json",
    kb_dir="kb_by_category",
    rag_dir="rag_inputs_by_request",
):
    """–°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É —Å KB –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ RAG-–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∑–∞–ø—Ä–æ—Å."""

    if not os.path.exists(dataset_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {dataset_path}")

    with open(dataset_path, encoding="utf-8") as f:
        data = json.load(f)

    os.makedirs(kb_dir, exist_ok=True)
    os.makedirs(rag_dir, exist_ok=True)

    kb_by_category = defaultdict(set)

    for i, entry in enumerate(data):
        category = entry.get("category_title", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").strip()
        context = entry["label"].strip()
        question = entry["text"].strip()

        kb_by_category[category].add(context)

        rag_doc = {
            "id": f"req_{i:05}",
            "category_title": category,
            "question_text": question,
            "expected_answer": context,
            "rag_prompt": f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n–í–æ–ø—Ä–æ—Å: {question}",
            "status": "pending",  # –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞ 'processed', 'validated', 'skipped' –∏ —Ç.–¥.
            "notes": "",
        }

        with open(
            os.path.join(rag_dir, rag_doc["id"] + ".json"), "w", encoding="utf-8"
        ) as fout:
            json.dump(rag_doc, fout, ensure_ascii=False, indent=2)

    for category, entries in kb_by_category.items():
        cat_file = os.path.join(kb_dir, category + ".json")
        with open(cat_file, "w", encoding="utf-8") as fcat:
            json.dump(sorted(entries), fcat, ensure_ascii=False, indent=2)

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ KB –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {len(kb_by_category)}")
    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ RAG: {len(data)} –≤ –ø–∞–ø–∫–µ '{rag_dir}'")


if __name__ == "__main__":
    generate_kb_and_rag_docs()
